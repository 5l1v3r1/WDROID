#!/bin/bash
################################################################################
################################################################################
####                                                                       #####
#### A notice to all nerds.                                                #####
#### If you will copy developers real work it will not make you a hacker.  #####
#### Resepect all developers, we doing this because it's fun!              #####
####                                                                       #####
################################################################################
################################ SOURCE CODE ###################################
################################################################################
###################### XXXXXXX WAS FOUNDED BY WUSEMAN ##########################
################################################################################
####                                                                       #####
####  XXXXX                                                                #####
####  Copyright (C) 2018-2019, wuseman                                     #####
####                                                                       #####
####  This program is free software; you can redistribute it and/or modify #####
####  it under the terms of the GNU General Public License as published by #####
####  the Free Software Foundation; either version 2 of the License, or    #####
####  (at your option) any later version.                                  #####
####                                                                       #####
####  This program is distributed in the hope that it will be useful,      #####
####  but WITHOUT ANY WARRANTY; without even the implied warranty of       #####
####  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        #####
####  GNU General Public License for more details.                         #####
####                                                                       #####
####  You must obey the GNU General Public License. If you will modify     #####
####  this file(s), you may extend this exception to your version          #####
####  of the file(s), but you are not obligated to do so.  If you do not   #####
####  wish to do so, delete this exception statement from your version.    #####
####  If you delete this exception statement from all source files in the  #####
####  program, then also delete it here.                                   #####
####                                                                       #####
####  Contact:                                                             #####
####          IRC: Freenode @ wuseman                                      #####
####          Mail: wuseman <wuseman@nr1.nu>                               #####
####                                                                       #####
################################################################################
################################################################################

if [[ $EUID -gt "0" ]]; then echo "This script require root privileges..";exit;  fi 

if [[ ! -f "/etc/wdroid.conf" ]]; then cp ./wdroid.conf /etc; fi

source /etc/wdroid.conf


status() {
ADBW=$(adb devices | sed -n '2p'|awk '{print $2}' | sed 's/device/normal/g')
ADBF="$(fastboot devices | grep fastboot|awk '{print $2}')"
ADBOFF="$(adb devices | sed -n 2p)"

if [[ $ADBW = "normal" ]]; then
    echo "normal" > $(pwd)/.wdroid-status
elif [[ $ADBW = "unauthorized" ]]; then
    echo " * Please allow this pc to authorize" > $(pwd)/.wdroid-status
elif [[ $ADBW = "recovery" ]]; then
    echo "recovery" > $(pwd)/.wdroid-status
elif [[ $ADBF = "fastboot" ]]; then
    echo "fastboot" > $(pwd)/.wdroid-status
else
    echo "* No device connected.."
    exit 1
fi
}

status
mustbeinnormalmode() {
if [[ ! $(cat $(pwd)/.wdroid-status) = "normal" ]]; then
   echo "Device must be in normal mode for this feature, aborted.."
   exit 1
fi
}

requirements() {
mustbeinnormalmode
adb="$(which adb 2> /dev/null)"
distro=$(cat /etc/os-release | head -n 1 | cut -d'=' -f2 | sed 's/"//g')

if [ -z "$adb" ]; then
  read -p "Install adb (Y/n) " adbinstall
fi

case $adbinstall in
     "Y")
      sleep 1
case $distro in
     "Gentoo")
        echo -e "\nIt seems you running \e[1;32m$distro\e[0m wich is supported, installing adb...."
        emerge --ask android-tools ;;
     "Sabayon")
        echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
        emerge --ask android-tools ;;
     "Ubuntu")
        echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
        apt update -y; apt upgrade -y; apt-get install adb ;;
     "Debian")
        echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
        apt update -y; apt upgrade -y; apt-get install adb ;;
     "Raspbian")
        echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
        apt update -y; apt upgrade -y; apt-get install adb ;;
     "Mint")
        echo -e "It seems you running \e[1;32m$distro\e[0m wich is supported, installing adb....\n"
        apt update -y; apt upgrade -y; apt-get install adb ;;
     "no") echo "Aborted." ;
           exit 0 ;;
esac
       echo -e "This tool is not supported for $distro, please go compile it from source instead...\n"
esac
}

root_required() {
adb shell which su &> /dev/null; if [[ $? = "1" ]]; then echo "This option need device to be rooted, aborted..";exit 1; fi
}

sqlite_required() {
if [[ -n $(type sqlite3 -v &> /dev/null) ]]; then
     echo "Sqlite3 is required to be installed on your pc, aborted"
     exit 1
fi
}



activity() {
         if [[ $OPTARG = "show" ]]; then
         echo "Current application is in use: $(adb shell dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp'|grep '/'|awk -F'u0' '{print $2}'|awk '{print $1}'|cut -d/ -f1|head -n1)"
         elif [[ $OPTARG = "uninstall" ]]; then
         adb shell dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp'|grep '/'|awk -F'u0' '{print $2}'|awk '{print $1}'|cut -d/ -f1  | head -n 1|xargs adb shell pm uninstall --user 0
         elif [[ $OPTARG = "kill" ]]; then
         adb shell dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp'|grep '/'|awk -F'u0' '{print $2}'|awk '{print $1}'|cut -d/ -f1 | xargs adb shell am force-stop
         elif [[ $OPTARG = "pull" ]]; then
         echo "Current application is in use: $(adb shell dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp'|grep '/'|awk -F'u0' '{print $2}'|awk '{print $1}'|cut -d/ -f1|head -n1)"
         else
         echo "Please use show, uninstall, kill or pull.."	
         fi
}

call() {
mustbeinnormalmode
if [[ -z $LANDSCODE ]]; then
  echo "You must set your landscode before you will call someone.."
read -p "Want me to set your landscode (y/N): " landscode
   if [[ $landscode = "y" ]]; then
read -p "Landscode: +" addlandscode
    sed -i "16d" /etc/wdroid.conf
    sed -i "16i LANDSCODE=+$addlandscode" /etc/wdroid.conf
    echo "Landscode $addlandscode has been set, you wont see this message again.."
else
    echo "Set your landscode manually in /etc/wdroid.conf or run me again, it is required to set landscode."
    exit
  fi
fi

trap ctrl_c INT

function ctrl_c() {
        echo "Aborted call.."
        adb shell input keyevent KEYCODE_ENDCALL
        exit
}

read -p "Enter Number: $landscode" number
if [[ -z $number ]]; then
   echo "You must enter a phone number, aborted.."
   exit
fi

if [[ $(echo $number | wc -c) -lt 7 ]]; then
   echo "This is not a real number, enter a real number.."
   exit
else
read -p "Do you want speaker on (y/n): " speaker
case $speaker in
           "y") 
                adb shell am start -a android.intent.action.CALL -d tel:$landscode$number &> /dev/null; 
                sleep 2.0;
                adb shell service call audio 20 i32 1 # does this really works on android oreo 8.0?
                  echo "Dialing +46$number"
                  read -p "Press any key to end call"
                adb shell input keyevent KEYCODE_ENDCALL
                  echo -e "Call ended"
                adb shell input keyevent 6
                exit 1 ;;
           "n") 
                adb shell am start -a android.intent.action.CALL -d tel:+46$number &> /dev/null
                  echo -e "Dialing +46$number"
                read -p "Press any key to end call"
                adb shell input keyevent KEYCODE_ENDCALL
                  echo "Call ended"
                adb shell input keyevent 6
                exit 1 ;;
esac
fi
}


wdroidwifi() {
root_required
adb shell 'su -c cat /data/misc/wifi/WifiConfigStore.xml' > /tmp/WifiConfigStore.xml
SSID="$(cat /tmp/WifiConfigStore.xml  | awk -F'<string name="ConfigKey">&quot;' '{print $2}' | grep '\S' | cut -d'&' -f1 > /tmp/ssid.txt)"
PSK="$(cat /tmp/WifiConfigStore.xml  | awk -F'<string name="PreSharedKey">&quot;' '{print $2}' | grep '\S' | cut -d'&' -f1 > /tmp/psk.txt)"

printf "%50s\n" | tr ' ' '='
printf "| SSID                              PSK          | \n"
printf "%50s\n" | tr ' ' '='
pr -m -t /tmp/ssid.txt /tmp/psk.txt
printf "%50s\n" | tr ' ' '='
}


readsms() {
root_required
sqlite_required
mustbeinnormalmode

if [[ -n $(type sqlite3 -v &> /dev/null) ]]; then
     echo "Sqlite3 is required to be installed on your pc, aborted"
     exit 1
fi

if [[ -f  $(adb shell 'su -c /data/data/com.android.providers.telephony/databases/mmssms.db &> /dev/null') ]]; then
echo "Seems there is no sms stored on your device."; exit; fi

adb shell 'su -c cat /data/data/com.android.providers.telephony/databases/mmssms.db' > mmssms.db

if [[ ! -s ./mmssms.db ]];then
  printf "No text messages has been recived or sent from your device..\n"
  exit
fi

read -p "Read sent sms or read recived sms (s)=sent/(r)=recieved: " eh
case $eh in
     s) echo "SELECT * FROM sms;" | sqlite3 -csv mmssms.db | awk -F',' '{print $3,$13}' ;;
     r) echo "SELECT * FROM sms;" | sqlite3 -csv mmssms.db | awk -F'0,,"' '{print $2}'|cut -d'"' -f1;;
esac
rm mmssms.db
}

pullapks() {
mustbeinnormalmode
line='..............................................'
printf "Please enter path to store the apk files in, path: "; read storagepath
echo ""
mkdir -p $storagepath
cd $storagepath
printf "%61s\n" | tr ' ' '='
printf "Pulling applications installed from playstore..........[\e[0;33mWAIT\e[0m]\n"
printf "%61s\n" | tr ' ' '='

for package in $(adb shell pm list packages -3 | tr -d '\r' | sed 's/package://g'); do
    apk=$(adb shell pm path $package | tr -d '\r' | sed 's/package://g' | cut -d\/ -f4|cut -d- -f1)
    apk_real=$(adb shell pm path $package | tr -d '\r' | sed 's/package://g')
    printf "Pulling: $apk";
    adb pull -p $apk_real "$package".apk &> /dev/null
    printf "%s%s[\e[1;32mDONE\e[0m]\n" "${line:${#apk}}"
done
PCKS="$(adb shell pm list packages -3 | tr -d '\r' | sed 's/package://g' | wc -l)"
printf "%61s\n" | tr ' ' '='
printf "Pulled $PCKS apk packages from your device................[\e[1;32mDONE\e[0m]\n"
printf "%61s\n" | tr ' ' '='
exit

}

dialed() {
mustbeinnormalmode
root_required
sqlite_required
dialeddb="/data/data/com.android.providers.contacts/databases"
dialedtmp="/storage/emulated/0/wuseman/tmp"

adb shell 'su -c cat /data/data/com.android.providers.contacts/databases/calls.db' > calls.db


DIALEDD="$(strings calls.db |awk -F'+' '{print $2}'|grep '\S')"
if [[ -z $DIALEDD ]]; then
  printf "No dialed numbers.\n"
  exit
else

#if [[ $(echo "SELECT * FROM calls;" | sqlite3 -csv calls.db | awk -F'"' '{print $6}') != "[A-Za-z]" ]]; then echo "Not In Contact List";fi

echo "Printing dialed numbers:"
echo "------------------------"
echo "SELECT * FROM calls;" | sqlite3 -csv calls.db | awk -F'"' '{print $1,$6}' | sed 's/,1,/ -/g' | cut -d, -f2
rm calls.db &> /dev/null
fi
}

if [[ $1 = "-R" ]]; then
if [[ $2 = "bootloader" ]]; then
    adb reboot bootloader
    exit
    printf "Rebooting device into bootloader..\n"
elif [[ $2 = "normal" ]]; then
    adb reboot
    exit
    printf "Rebooting device into normal mode..\n"
elif [[ $2 = "recovery" ]]; then
    adb reboot recovery
    exit
    printf "Rebooting device into recovery mode..\n"

else
   echo "You must specify in wich runmode you want to reboot.."
   exit
fi
exit
fi

apps() {
mustbeinnormalmode
if [[ $OPTARG = "all" ]]; then adb shell pm list packages|cut -d: -f2|sort|nl;fi
if [[ $OPTARG = "disabled" ]]; then adb shell pm list packages -d|cut -d: -f2|nl|sort;fi
if [[ $OPTARG = "enabled" ]]; then adb shell pm list packages -e|cut -d: -f2|nl|sort;fi
if [[ $OPTARG = "system" ]]; then adb shell pm list packages -s|cut -d: -f2 |nl|sort; fi
if [[ $OPTARG = "playstore" ]]; then adb shell pm list packages -3|cut -d: -f2 |nl|sort;fi
if [[ $OPTARG = "pgroups" ]]; then adb shell pm list permission-groups|cut -d: -f2|nl|sort;fi
if [[ $OPTARG = "permissions" ]]; then adb shell pm list permissions|cut -d: -f2 |nl|sort;fi
}

unlock() {
mustbeinnormalmode
if [[ -z "$PINCODE" ]]; then
echo "You must set a pin in configuration file before you are using wdroid."
read -p "Want me to set pin (y/N): " setpiny
  case $setpiny in
    y)  read -p "Enter your pin: " pincode
        echo "$pincode has been set, now you can unlock your device without entering a pin everytime."
        sed -i "1d" /etc/wdroid.conf
        sed -i "1 i PINCODE=$pincode" /etc/wdroid.conf
        exit 1 ;;
    N) printf "\nEdit the pin manually later for not get asked for PIN again.\n\n"
       read -p "PIN: " PINCODE ;;
esac
fi

screen="$(adb shell dumpsys nfc| grep 'mScreenState=')"
  case $screen in
    "mScreenState=OFF")
       echo "Unlocking device.."
          adb shell input keyevent 82;sleep 0.1
          adb shell input keyevent 82;sleep 0.2
          adb shell input text "$PINCODE" 
          sleep 2 
          screen2="$(adb shell dumpsys nfc| grep 'mScreenState=' | grep -q ON_UNLOCKED)"
          if [[ $? -gt 0 ]]; then
        echo "Something went wrong, are you sure the pin is correct?"
          else
        echo "Unlocked Device.." 
        fi ;;
      "mScreenState=ON_LOCKED")
       echo "Unlocking Device.."
          adb shell input keyevent 82
          adb shell input keyevent 82;sleep 0.1
       source /etc/wdroid.conf
          adb shell input text $PINCODE;sleep 0.1
       echo "Unlocked Device.." ;;
       "mScreenState=ON_UNLOCKED")
       echo "Device is already unlocked.."
         sleep 0 ;;
  esac
}

delsms() {
mustbeinnormalmode
root_required
if [[ ! -f  $(adb shell 'su -c /data/data/com.android.providers.telephony/databases/mmssms.db &> /dev/null') ]]; then
    echo "* Seems there is no sms storage on your device."; exit; fi
read -p "Are you REALLY sure you want to delete all sms (Y/n): " delem
if [[ $delem = "Y" ]]; then
    adb shell 'su -c' rm /data/data/com.android.providers.telephony/databases/mmssms.db
    echo "Deleted all sms, restarting your device cause we need to sync sms database."
    adb reboot
else
    echo "Aborted."
    exit 0
fi
}

factoryreset() {
mustbeinnormalmode
root_required
read -p "Are you REALLY sure you want to factory reset your device (Y/n): " yes
if [[ $yes = "Y" ]]; then
read -p "Please confirm by type uppercase YES: " yesyes
if [ $yesyes = "YES" ]; then
  if [[ -n $(adb shell which su &> /dev/null) ]]; then
      echo "Please wait, restoring your device to factory settings, phone will be restarted.."
      adb shell am broadcast -a android.intent.action.MASTER_CLEAR            # Not rooted
      adb reboot
else
      echo "Please wait, restoring your device to factory settings, phone will be restarted.."
      adb shell  "su -c am broadcast -a android.intent.action.MASTER_CLEAR" # Rooted devivce
      adb reboot
fi
fi
else
echo "Aborted.."
exit
fi
}

lock() {
mustbeinnormalmode
root_required
sleeping="$(adb shell dumpsys power | grep 'mWakefulness=')"
screen="$(adb shell dumpsys nfc| grep 'mScreenState=')"
case $screen in
      "mScreenState=OFF")
         echo "Device is not unlocked."
                     ;;
      "mScreenState=ON_LOCKED")
         echo "Device is not unlocked."
        sleep 0 ;;
       "mScreenState=ON_UNLOCKED")
           echo "Turning off screen.."
           adb shell input keyevent 26
           echo "Screen has been locked"
   exit
esac
}

usage() {
cat << "EOF"

    wdroid v3.0 - [-b] [-e] [-f] [-h] [-r] [-t]

--- General usages:

   ./wdroid -a [show] [kill] [uninstall] [pull]    - Print wich activity is currently in use
   ./wdroid -A [all] [system] [playstore]          - Print installed applications
   ./wdroid -b [url]                               - Open google chrome and visit google.com
   ./wdroid -c                                     - Make a call to someone
   ./wdroid -d                                     - Print dialed contacts in cli without enter any db tool
   ./wdroid -f                                     - Factory reset
   ./wdroid -l                                     - If device is unlocked, lock device
   ./wdroid -L                                     - Show menu with logging options
   ./wdroid -m                                     - Print current running  mode (normal,bootloader,recovery supported)
   ./wdroid -r                                     - Print sms and mms stored on your device
   ./wdroid -p                                     - Download all custom installed apk files
   ./wdroid -R [normal] [bootloader] [recovery]    - Reboot device

--- Huawei Users:

    ./wdroid -h huawei -m magisk                   - Flash device with magisk and gain root access
    ./wdroid -h huawei -t twrp                     - Flash recovery partition with twrp
    ./wdroid -h huawei -u ubootloader              - Unlock bootloader (Bootloader key required)

EOF
}

is-device-a-huawei() {
HUAWEI="$(adb shell getprop ro.product.manufacturer)"
if [[ $HUAWEI != "HUAWEI" ]]; then
    echo "* This require a huwaei device to be connected, aborted.."
    exit 1
fi
}
huawei-unlock-bootloader() {
is-device-a-huawei
if [[ $ADBW = "normal" ]]; then
   printf "Device must be in bootloader mode for unlock bootloader\n"
   read -p "Do you want to reboot device into bootloader mode (y/N): " restarttboot1
if [[ $restarttboot1 != "y" ]]; then
   printf "Aborted..\n"
   exit 0
else
if [[ -n $BOOTLOADER_CODE ]]; then
   printf "Restarting device, please wait"
   adb reboot bootloader
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "\nPlease press volume up followed by powerbutton on your device\n"
   fastboot oem unlock $BOOTLOADER_CODE
   printf "If you unlocked bootloader, device will now do a factory reset - Otherwise reboot device via: 'fastboot reboot'\n"
   exit 0
elif [[ -z $BOOTLOADER_CODE ]]; then
   read -p "Bootloader Key: " BCODE
   printf "Restarting device, please wait"
   adb reboot bootloader
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "\nPlease press volume up followed by powerbutton on your device\n"
   fastboot oem unlock $BCODE
   printf "Successfully unlocked bootloader, device will now do a factory reset\n"
 if [[ -z $BCODE ]]; then
    printf "You must enter a valid bootloader code, aborted\n"
    exit 0
fi
  else
   printf "Restarting device, please wait"
  for i in $(seq 1 8); do printf ""; sleep $i; done
   printf "Please press volume up followed by powerbutton on your device\n"
   fastboot oem unlock $BCODE
   printf "Successfully unlocked bootloader, device will now do a factory reset\n"
   exit 0

fi
fi
fi
}


huawei-unlock-bootloader-fastboot() {
is-device-a-huawei
if [[ $ADBF = "fastboot" ]]; then

 if [[ -n $BOOTLOADER_CODE ]]; then
   printf "Please press volume up followed by powerbutton on your device\n"
   fastboot reboot oem unlock $BCODE
   printf "Successfully unlocked bootloader, device will now do a factory reset\n"
   exit 0
 else
     read -p "Bootloader Code: " BCODE

     if [[ -z $BCODE ]]; then
        printf "You must enter a valid bootloader code, aborted\n"
        exit 0
     fi

   printf "Please press volume up followed by powerbutton on your device\n"
   fastboot oem unlock $BCODE
   printf "Successfully unlocked bootloader, device will now do a factory reset\n"
   exit 0
fi
fi
}

huawei-twrp-flashing() {
is-device-a-huawei
ADBW=$(adb devices | sed -n '2p'|awk '{print $2}' | sed 's/device/normal/g')
ADBF="$(fastboot devices | grep fastboot|awk '{print $2}')"
ADBOFF="$(adb devices | sed -n 2p)"

if [[ $ADBF != "fastboot" ]] && [[ $ADBW != "normal" ]]; then
   printf " * Your device is not connected properly.\n"
   exit 0
fi

if [[ -z $TWRP_IMAGE ]]; then
    echo " * No twrp image has been found, aborted"
    exit 0
fi

if [[ ! -f $TWRP_IMAGE ]]; then
    echo " * No twrp image has been found, aborted"
    exit 0
fi



if [[ $ADBF = "fastboot" ]]; then
read -p "Are you really sure you want to flash recovery partition with twrp (y/N): " FLASHTWRP
if [[ $FLASHTWRP = "y" ]]; then
    printf "Please wait, flashing recovery ramdisk..\n"
    fastboot flash recovery_ramdisk $TWRP_IMAGE
    printf "Recovery ramdisk has been flashed, restarting device..\n"
    fastboot reboot
else
    echo "Aborted."
    exit 0
fi
fi

if [[ $ADBW = "normal" ]]; then
   printf "Device must be in bootloader mode for flash recovery ramdisk\n"
   read -p "Do you want to reboot device into bootloader mode (y/N): " restarttboot1
   if [[ $restarttboot1 != "y" ]]; then
      printf "Aborted..\n"
      exit 0
   else
   printf "Restarting device, please wait"
   adb reboot bootloader
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "."; sleep 1
   printf "\nPlease wait, flashing recovery ramdisk..\n"
    fastboot flash recovery_ramdisk $TWRP_IMAGE
    printf "Recovery ramdisk has been flashed, restarting device..\n"
    fastboot reboot
   exit 0
fi
fi
}

logcat() {
dt="$(date +%d%m%y)"
clear
echo ""
echo "  "
echo "  -------------------------------------------"
echo "   * * * * * Diagnostic Tools Menu * * * * *"
echo "  -------------------------------------------"
echo ""
echo "   [1] logcat"
echo "   [2] logcat excempt activitymanager (less spam)"
echo "   [3] sysdump"
echo "   [4] battery stats"
echo "   [5] cpu info"
echo "   [6] mem info"
echo "   [7] proc stats"
echo "   [8] netstats"
echo "   [9] account info"
echo "   [10] disk stats"
echo "   [11] usage stats"
echo "   [12] power manager"
echo "   [13] clear all logs"
echo ""
echo "  [q] quit"
echo " -------------------------------------------"
echo ""

read diagst

        case "$diagst" in
 
                1) adb logcat ;;
                2) adb logcat ActivityManager:I MyApp:D *:S ;;
                3) adb shell dumpsys ;;
                4) adb shell dumpsys batterystats ;;
                5) adb shell dumpsys cpuinfo ;;
                6) adb shell dumpsys meminfo ;;
                7) adb shell dumpsys procstats --hours 3 ;;
                8) adb shell dumpsys netstats ;;
                9) adb shell dumpsys account ;;
                10) adb shell dumpsys diskstats  ;;
                11) adb shell dumpsys usagestats ;;
                12) adb shell dumpsys power ;;
                13) adb logcat -c ;;
                q) restart ;;
                        *) echo "Unknown command: '$diagst'" ;;
        esac
}

mode() {
ADBW=$(adb devices | sed -n '2p'|awk '{print $2}' | sed 's/device/normal/g')
ADBF="$(fastboot devices | grep fastboot|awk '{print $2}')"
ADBOFF="$(adb devices | sed -n 2p)"

if [[ $ADBW = "normal" ]]; then
    echo "normal" > $(pwd)/.wdroid-status
    echo "Device is in normal mode"
elif [[ $ADBW = "unauthorized" ]]; then
    echo " * Please allow this pc to authorize" > $(pwd)/.wdroid-status
elif [[ $ADBW = "recovery" ]]; then
    echo "recovery" > $(pwd)/.wdroid-status
    echo "Device is in recovery mode"
elif [[ $ADBF = "fastboot" ]]; then
    echo "fastboot" > $(pwd)/.wdroid-status
    echo "Device is in bootloader mode"
else
echo " * No device connected.."
fi
}


huawei-flash-magisk() {
is-device-a-huawei
if [[ $ADBW = "normal" ]]; then
   printf "Device must be in recovery mode when flashing device with magisk\n"
   read -p "Do you want to reboot device into recovery mode (y/N): " restarttboot1
if [[ $restarttboot1 != "y" ]]; then
   printf "Aborted..\n"
   exit 0
else
printf "\nBootloader must have been flashed with twrp before you flashing\n"
read -p "your device with magisk. Did you flash recovery with twrp (y/N): " yesidid
if [[ $yesidid = "y" ]]; then
if [[ -z $MAGISK_ZIP ]]; then
  echo "Can't find magisk file, aborted."
  exit 0
fi
     echo -e "\nPlease wait, restarting device..";     adb reboot recovery
     echo "----------------------------------------------------"
     echo -ne '#                                              (01%)\r';sleep 2    
     echo -ne '####                                           (19%)\r';sleep 2    
     echo -ne '########                                       (27%)\r';sleep 2    
     echo -ne '##########                                     (39%)\r';sleep 2    
     echo -ne '###############                                (41%)\r';sleep 2    
     echo -ne '##################                             (44%)\r';sleep 2    
     echo -ne '#######################                        (58%)\r';sleep 2    
     echo -ne '#########################                      (61%)\r';sleep 2    
     echo -ne '###########################                    (65%)\r';sleep 2    
     echo -ne '#############################                  (68%)\r';sleep 2    
     echo -ne '###############################                (71%)\r';sleep 2    
     echo -ne '#################################              (77%)\r';sleep 2    
     echo -ne '###################################            (83%)\r';sleep 2    
     echo -ne '#####################################          (89%)\r';sleep 2     
     echo -ne '#########################################      (94%)\r';sleep 2     
     echo -ne '############################################# (100%)\r';echo -ne '\n'
     adb devices|grep -w recovery &> /dev/null
     if [[ $? -eq "0" ]]; then
     echo "----------------------------------------------------"
     echo "0) --> Device has now entered recovery mode (TWRP)..";
     echo "1) --> Press 'Advanced' (DOWN IN THE LEFT CORNER)...";
     echo "2) --> Press 'ADB Sideload' (DOWN IN LEFT CORNER)...";
     echo "3) --> Choose yes to format dalvik and cache........"
     echo "4) --> Now just swipe to enable 'ADB Sideload'......"
     echo "----------------------------------------------------"
     read -p "Hit [:enter:] when adb sideload is listening.....";
     areweinsideload="$(adb devices | grep -q sideload &> /dev/null)" 
     if [[ $? -eq "0" ]]; then 
     adb sideload $MAGISK_ZIP
     else
     printf "\nSomething went wrong, aborted..\n"
     printf "Did you really wait until you saw sideload was listening for a file?\n"
     exit 0
     fi
     echo "--> Successfully flashed device with magisk........."
     echo "--> Enjoy your fully unlocked device, restarting...."
     echo "----------------------------------------------------"
     sleep 2
     adb reboot
  else
     echo "----------------------------------------------------"
     printf "Something went wrong, please try again.\n"
     exit 0
  fi
else
printf "\nPlease flash your device with twrp before you continue with magisk ..\n\n"
fi
fi
fi
}

if [[ -z $1 ]]; then usage;exit 1; fi

# Fix this part
systeminfo() {
adb get-serialno
# Prints about the current state of the device: offline | bootloader | device
adb get-state

# Prints the serial number of the device
adb get-serialno

# Prints the device path
adb get-devpath 
adb shell cat /proc/cpuinfo
}
screenrecord() {
adb shell screenrecord — time-limit 120 /sdcard/myVideo.mp4
}
screenshot() {
printf "Taking a screenshot.."
adb shell screencap -p > adb-screenshot.png
printf "....[\e[1;32mDONE\e[0m]\n"
}

# Acting as a Developer utility-belt
# The private key is stored in <file>, and the public key is stored in <file>.pub Any existing files are overwritten.
keygen() {
 echo lol.
#adb keygen <filename>
}

while getopts ":a:A:R::h:m:t:u:LbFdDlfpcwruUsm" getopt; do
   case $getopt in
      a) activity     ;;
      b)
        adb shell am start -a android.intent.action.VIEW -d https://www.google.com com.android.chrome &> /dev/null
        printf "Opened Google Chrome..\n"
      ;;
      c) call         ;;
      d) dialed       ;;
      D) delsms       ;;
      f) factoryreset ;;
      F) flashramdisk ;;
      h) h=${OPTARG}
         ((h == huawei )) || usage
            ;;
        m)
            m=${OPTARG}
            ((m == magisk)) || usage
            ;;
        t)
            t=${OPTARG}
            ((t == twrp )) || usage
            ;;
       U)
            u=${OPTARG}
            ((u == unlockbootloader )) || usage
            ;;

      m) mode         ;;
      l) lock         ;;
      L) logcat       ;;
      r) readsms      ;;
      w) wdroidwifi   ;;
      p) pullapks     ;;
      R) reboot       ;;
      s) screenshot   ;;
      A) apps         ;;
      u) unlock       ;;
   esac
done

shift $((OPTIND-1))


if [[ -n "${h}" ]] && [[ "${m}" = "magisk" ]]; then
    huawei-flash-magisk
fi

if [[ -n "${h}" ]] && [[ "${t}" = "twrp" ]]; then
    huawei-twrp-flashing
fi

if [[ -n "${h}" ]] && [[ "${u}" = "ubootloader" ]]; then
     huawei-unlock-bootloader; huawei-unlock-bootloader-fastboot
fi


